-module(subscription_event_h).
-copyright('Copyright (c) 2003 Anders Nygren').

-behaviour(gen_event).
-export([subscribe/3, unsubscribe/2,change_filter/3]).
-export([init/1, handle_event/2, handle_call/2, handle_info/2,
         terminate/2,code_change/3]).

%%---------------------------------------------------------------------------
%%
%%	Interface
%%
%---------------------------------------------------------------------------
%
%	EventMgr = The name of an Event Manager
%	The filter shall be a match specification, e.g.
%	generated by ets:fun2ms.

subscribe(EventMgr,Id,Filter) -> 
    gen_event:add_sup_handler(EventMgr, {subscription_event_h,Id}, Filter).

unsubscribe(Event,Id) ->
   gen_event:delete_handler(Event,{?MODULE,Id},[]).

change_filter(Event,Id,NewFilter) ->
   gen_event:call(Event,{?MODULE,Id},{change_filter,NewFilter}).

%%---------------------------------------------------------------------------
%%
%%	Callbacks
%%
init(Filter) -> 
   {ok, Filter}.

handle_event(Event, Filter=State)      -> 
   case ets:test_ms(Event,Filter) of
      {ok,false} ->
         ok;
      {ok,{{send_to,To},Msg}} ->
         To!Msg;
      {ok,{Fun,Pars}} when is_function(Fun) ->
         case catch Fun(Pars) of
	    {'EXIT', Reason, Stack} ->
	       ok; % Add error logging here
	    Res ->
	       ok
	 end;
      Other ->
	 ok % Add error logging here
   end,
   {ok, State};

handle_event(Event, State) -> 
   {ok,State}.

handle_call({change_filter, NewFilter}, State) ->
   {ok, ok, NewFilter}.

handle_info(Info, State) -> 
   {ok,State}.

terminate(_, _) -> ok.

code_change(Old,State,Extra) -> {ok,State}.
